." heatherly hand crafted (like a dope)
."
." sections, break up the document into pieces
."   .SH <str>   begin a new section
."   .SS <str>   begin a new sub-section
."
." paragraphs, if not special formatting is used, these are unnecessary
."   .PP         before a set of contiguous lines will run them together into
."               a single paragraph -- helps if macros separate by accident
."   .RS <n>     start a paragraph indented by <n> characters (i use 3 mostly)
."   .RE         end that relative paragraph
."   .IP <str>   uses <str> as an outdent and the next line is indented
."   .TP         tag paragraph which has a more controllable outdent than .IP
."   .HP         start hanging paragraph where all following lines are indented
."
."
."
."
."


.TH yLOG 3 2008-Jul "linux" "heatherly custom tools manual"


.SH NAME
.BI yLOG
\- simple, direct, consistent, and clean process execution logging

.SH SUMMARY
.BI yLOG
is a simple, direct, consistent, and clean shared library for 
process execution logging to encourage program monitoring, execution flow understanding,
defensive coding, and early issue detection in custom programs.

.SH SYNOPSIS
.nf
.B #include  <yLOG.h>

.R  ---general-------------------------------------
.sp
.BI "int      yLOG_begin  (cchar *" "a_program" ", cchar " "a_location" ", cchar " "a_quiet" ");"
.BI "void     yLOG_end    (void);"
.BI "char     yLOG_version(void);"

.R  ---line versions-------------------------------
.sp
.BI "void     yLOG_enter  (cchar *" "a_func" ");"
.BI "void     yLOG_exit   (cchar *" "a_func" ");"
.sp
.BI "void     yLOG_break  (void);"
.BI "void     yLOG_note   (cchar *" "a_info" ");"
.BI "void     yLOG_info   (cchar *" "a_subject" ", cchar *" "a_info" ");"
.BI "void     yLOG_delim  (cchar *" "a_subject" ", cchar *" "a_info" ");"
.BI "void     yLOG_value  (cchar *" "a_subject" ", cint   " "a_value" ");"
.BI "void     yLOG_llong  (cchar *" "a_subject" ", cllong " "a_value" ");"
.BI "void     yLOG_char   (cchar *" "a_subject" ", cchar  " "a_char" ");"
.BI "void     yLOG_point  (cchar *" "a_subject" ", cvoid *" "a_pointer" ");"
.BI "void     yLOG_bullet (cint   " "a_num    " ", cchar *" "a_info" ");"
.BI "void     yLOG_pair   (cint   " "a_num    " ", cint   " "a_value" ");"

.R  ---compact versions----------------------------
.sp
.BI "void     yLOG_senter (cchar *" "a_func" ");"
.BI "void     yLOG_sexit  (void);"
.sp
.BI "void     yLOG_snote  (cchar *" "a_info" ");"
.BI "void     yLOG_sint   (cint   " "a_value" ");"
.BI "void     yLOG_shex   (cuint  " "a_value" ");"
.BI "void     yLOG_schar  (cchar  " "a_info" ");"
.BI "void     yLOG_spoint (cvoid *" "a_pointer" ");"
.BI "void     yLOG_sinfo  (cchar *" "a_subject" ", cchar *" "a_info" ");"
.BI "void     yLOG_svalue (cchar *" "a_subject" ", cint   " "a_value" ");"

.R  ---normal warnings-----------------------------
.sp
.BI "void     yLOG_warn   (cchar *" "a_subject" ", cchar *" "a_issue" ");"
.BI "void     yLOG_error  (cchar *" "a_subject" ", cchar *" "a_issue" ");"
.BI "void     yLOG_fatal  (cchar *" "a_subject" ", cchar *" "a_issue" ");"

.R  ---extended warnings---------------------------
.sp
.BI "void     yLOG_hintx  (cchar *" "a_file" ", cint " "a_line" ", cchar *" "a_reason" ","
.BI "                       cchar *" "a_format" ", " "..." ");"
.BI "void     yLOG_warnx  (cchar *" "a_file" ", cint " "a_line" ", cchar *" "a_reason" ","
.BI "                       cchar *" "a_format" ", " "..." ");"
.BI "void     yLOG_errorx (cchar *" "a_file" ", cint " "a_line" ", cchar *" "a_reason" ","
.BI "                       cchar *" "a_format" ", " "..." ");"
.BI "void     yLOG_fatalx (cchar *" "a_file" ", cint " "a_line" ", cchar *" "a_reason" ","
.BI "                       cchar *" "a_format" ", " "..." ");"

.sp
Must also link to either the yLOG.so (shared) or yLOG.a (static) library
as this is not automatic.  Add "-lyLOG" to the object linking.

.SH OVERVIEW
the tragedy is that the art of logging and messaging seems to have died
with the passing of the "operator" role and now is done on a prorietary basis
using expensive commercial tools.  not good.  or, as an incoherent stream
of one-dimensional messages.  bloody worse.

so, yLOG provides a set of shared functions for logging program activities
which report to a structured, searchable message file that supports tracing
monitoring, warning, debugging, and maintenance.  it is designed to take a
repetative, tedious, haphazard, neglected, and error-prone task and make it
easy, systematic, shared, consistent, and maintainable.

yLOG focuses on improving the self-diagnostic capabilities by...
   - logging program start and conclusion
   - entry and exit to all major functions
   - indenting messages to make flow clear
   - categorizing messages to allow quick filtering and searching
   - showing critical informational and context messages
   - provide a standard for warning and errors
   - giving a true sense of durations and elapsed time

while this can not replace a program's own awareness, it can supplement it
in a way that promotes fast, accurate production monitoring

many existing libraries and utilities have been built by better programmers
which are likely superior in speed, size, capability, and reliability; BUT,
i would not have learned nearly as much using them, so i follow the adage...

TO TRULY LEARN> do not seek to follow in the footsteps of the men of old;
seek what they sought ~ Matsuo Basho

.SH DESCRIPTION
yLOG consists of
.BI 31
total functions separated into five categories --
.BI 3
general,
.BI 12
line oriented logging,
.BI 9
compact logging,
.BI 3
normal warning, and
.BI 4
extended warning functions.


.B GENERAL ---------------------------------------------------------
.sp
.B yLOG_begin,
in order to prepare the logger for use, this function passes a couple of
vital pieces of information.  The first is the program name to name the
output file.  The second is the output location which is
yLOG_SYSTEM (/var/log/yLOG), yLOG_PERSONAL (~/l_hlisda), or yLOG_STDOUT.
And the third is yLOG_NOISE (full output) or yLOG_QUIET (no output).
.sp
.B yLOG_end,
stops the logger and frees up the resources.  Any calls to the logger after
this may result in an error.
.sp
.B yLOG_ver,
produces a formatted string of the number and description for the current 
version of the yLOG library.  This is useful for debugging and is often
saved to the log itself.


.B LINE ORIENTED ---------------------------------------------------
.sp
these functions all produce a single line of output each, indented to
represent the processing depth.  the next two, yLOG_enter and yLOG_exit,
are the only two that change the indentation level.
.sp
.B yLOG_enter,
for each entry into a notable routine, the program should call this function
with the compilier constant
.BI __FUNCTION__
as the parameter to avoid any and all hard coding.
.sp
.B yLOG_exit,
for each exit from a notable routine, the program should call this function
with the compilier constant
.BI __FUNCTION__
as the parameter to avoid any and all hard coding.  since the logger uses
indentation, yLOG_enter and yLOG_exit should always be paired.
.sp
the next ten functions are used to present various date scenarious and types.
each of them acts on the following data elements: a_subject is a 1-10 character
short title, a_info is a character string, a_value is a numeric, and a_num
is also a numeric used as a title.
.sp
.B yLOG_break,
presents a dividing line in the output usually to show major transitions in
the program or to break up other messages.
.sp
.B yLOG_note,
presents a text string on the line, usually to show minor transitions in
the program or to break up other messages.
.sp
.B yLOG_info,
presents a short title/subject followed by a string with the actual
information.
.sp
.B yLOG_delim,
presents a short title/subject followed by a string with the actual
information which is delimited to show length clearly.
.sp
.B yLOG_value,
presents a short title/subject followed by an integer presenting a variable
or state.
.sp
.B yLOG_llong,
presents a short title/subject followed by a long long integer presenting
a variable or state.
.sp
.B yLOG_char,
presents a short title/subject followed by a character value presenting
a variable or state.
.sp
.B yLOG_point,
presents a short title/subject followed by a pointer value presenting
a variable or memory location.
.sp
.B yLOG_bullet,
presents a sequence number followed by an integer value presenting
a variable or state.
.sp
.B yLOG_pair,
presents an integer number followed by another integer value presenting
two related values at once.


.B COMPACT ---------------------------------------------------------
.sp
these functions work together to produce a single line of in total, indented to
represent quick, but complex actions.
.sp
.B yLOG_senter,
for each entry into a notable routine, the program should call this function
with the compilier constant
.BI __FUNCTION__
as the parameter to avoid any and all hard coding.
.sp
.B yLOG_sexit,
for each exit from a notable routine, the program should call this function
with no parameter.
.BI __FUNCTION__
as the parameter to avoid any and all hard coding.  since the logger uses
a single line, yLOG_senter and yLOG_sexit should always be paired.
.sp
the next ten functions are used to present various date scenarious and types.
each of them acts on the following data elements: a_subject is a 1-10 character
short title, a_info is a character string, a_value is a numeric, and a_num
is also a numeric used as a title.
.sp
.B yLOG_note,
presents a string in the line, usually to show actions.
.sp
.B yLOG_sint,
presents an integer in the line, usually to show value.
.sp
.B yLOG_shex,
presents a hex integer in the line, usually to show value.
.sp
.B yLOG_schar,
presents a char in the line, usually to show state.
.sp
.B yLOG_spoint,
presents a pointer in the line, usually to show location.
.sp
.B yLOG_sinfo,
presents a subject/string pair when lable is important.
.sp
.B yLOG_svalue,
presents a subject/integer pair when lable is important.


.B NORMAL WARNINGS -------------------------------------------------
.sp
these functions produce a line oriented warning message that works just like
the yLOG_info function but is categorized differently.
.sp
.B yLOG_warn,
presents a short title/subject followed by a string with the actual
convern, shown as a [w] instead of [i].
.sp
.B yLOG_error,
presents a short title/subject followed by a string with the actual
convern, shown as a [e] instead of [i].
.sp
.B yLOG_fatal,
presents a short title/subject followed by a string with the actual
convern, shown as a [g] instead of [i].


.B EXTENDED WARNINGS -----------------------------------------------
.sp
these functions produce a line oriented warning message that works just like
the yLOG_info function but is categorized differently.  But, they also
generate compilier style warnings to the screen.

they're parameters are all the same.  The first is a string of the source file
name originating the error, usually done with the
.BI __FILE__
compilier constant.
The second is the line number in the source file, , usually done with the
.BI __LINE__
compilier constant.  And, the third is a string of 1-12 characters
that gives a general reason for the error.

The remaining parameters are used exactly as printf would be formatted so that
temporary string storage is not required.  Essentially, that means a format
string and a list of arguments.
.sp
.B yLOG_warnx,
presents a short title/subject followed by a string with the actual
convern, shown as a [w] instead of [i].  Plus this produces a standard
screen message.
.sp
.B yLOG_errorx,
presents a short title/subject followed by a string with the actual
convern, shown as a [e] instead of [i].  Plus this produces a standard
screen message.
.sp
.B yLOG_fatalx,
presents a short title/subject followed by a string with the actual
convern, shown as a [g] instead of [i].  Plus this produces a standard
screen message.


.SH FILES

yLOG uses three locations for storing output depending on the setting used
when yLOG_begin is called.

.BI /var/log/yLOG/,
is used when YLOG_SYSTEM is passed

.BI ~/l_hlisda/,
is used when YLOG_PERSONAL is passed

.BI stdout,
is used when YLOG_STDOUT is passed

yLOG has no input or configuration files.

.SH BUGS
presently clean, but who knows till it rears its ugly head

.SH AUTHOR
the_heatherlys

.SH COLOPHON
this page is part of a documentation package meant to make our use of the
heatherly tools easier and faster

