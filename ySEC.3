.TH ySEC 3 2020-jan "linux" "heatherly custom tools manual" 
.SH NAME
.B ySEC
\- simple, clean, and clear security logging

.SH PATRON
.B aeolus-hippotades
(keeper of winds) guides seasonal and storm winds

.SH IMAGERY
pios, just, and kind king of the floating sky-island of aiolia

.SH SUMMARY
ySEC is a custom shared-library providing standardized, well-tested, and
traceable security services, such as access logging and monitoring, terminal
access and usage, and coded login strings.

.SH DOCUMENTATION FILES
.nf
ySEC (3)    >>>>>  interfacing applications with ySEC
.nf
ySEC (7)    иииии  decision rationale, objectives, and overview

.SH SYNOPSIS
.nf
.B #include  <ySEC.h>
.sp
===(( overall ))===============================
.BI "char* ySEC_version       (void);"

===(( utmp ))==================================
-------system---------------------
.BI "char  ySEC_startup       (void);"
.BI "char  ySEC_shutdown      (void);"
-------getty----------------------
.BI "char  ySEC_watch         (char *" "line " ");"
.BI "char  ySEC_ignore        (char *" "line " ", int   " "pid  " ");"
-------login----------------------
.BI "char  ySEC_login         (char *" "line " ", char *" "user " ", int   " "pid  " ");"
.BI "char  ySEC_failed        (char *" "line " ", char *" "user " ");"
.BI "char  ySEC_logout        (char *" "line " ", char *" "user " ", int   " "pid  " ");"

===(( coded ))=================================
.BI "char  ySEC_challenge     (int   " "seed " ", char *" "code " ");"
.BI "char  ySEC_response      (char *" "resp " ", char *" "user " ");"
.BI "char  ySEC_full          (char *" "resp " ", char *" "phase" ", char *" "judge" ", иии );"

===(( new ))===================================
.BI "char  ySEC_request       (char  " "dev  " ", int   " "rpid " ", int   " "time " ", иии );"
.BI "char  ySEC_active        (int   " "rpid " ", char *" "resp " ", char  " "phase" ", иии );"
.BI "char  ySEC_complete      (int   " "rpid " ", char  " "good " ");"

===(( terminal ))==============================
.BI "char  ySEC_valid         (char *" "dev  " ");"
.BI "char  ySEC_open          (int  *" "pid  " ", int  *" "fd   " ", char  " "std  " ", иии );"
.BI "char  ySEC_clear         (int   " "fd   " ");"
.BI "char  ySEC_close         (int  *" "fd   " ");"

.sp
.B link with -L/usr/local/lib, and either -lySEC or -lySEC_debug

.SH OVERALL FUNCTIONS
library setup, wrapup, and admin functions

.B ySEC_version ()
versioning string with version comment
   -- takes no arguments
   -- returns a char* ascii text string

.SH BASE FUNCTIONS
standardizes traditional logging to UTMP, WTMP, and BTMP

.B ySEC_startup ()
logs system initialization and startup
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_shutdown ()
logs system wrapup and shutdown
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_watch ()
logs startup of getty on a terminal
   1) char *line , particular terminal to watch
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_ignore ()
logs shutdown of getty on a terminal
   1) char *line , particular terminal to watch
   2) int   pid  , process id that used getty
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_login ()
logs successful access of the system
   1) char *line , particular terminal
   2) char *user , login user
   3) int   pid  , process id created
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_failed ()
logs unsuccessful access of the system
   1) char *line , particular terminal
   2) char *user , login user
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_logout ()
logs completion of access of the system
   1) char *line , particular terminal
   2) char *user , login user
   3) int   pid  , process id used
   -- returns char as success code (<0 fail, >=0 success)

.SH CODED FUNCTIONS
centralizes support of coded security strings.  these are experimental and
allow encoding information in challenge/response login dialogs.  the ones in
this library are for demo/testing only.  this concept will be used in login,
su, sudo, ssh, and getty services.  these are not for everyday users, only
for power users willing to trade speed/ease for another layer of security.

.B ySEC_challenge ()
creates a encoded security challenge string
   1) int   seed , seed for generation, or NULL
   2) char *text , returns security challeng string
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_response ()
interpretes a security challenge response, opaque
   1) char *text , response to challenge
   2) char *user , returns user entered in challenge
   -- returns char as success code (-1 fail/partial, 0 success)
   ** intentionally difficult to see feedback for hacking

.B ySEC_full ()
interpretes a security challenge response, feedback
   1) char *text , response to challenge
   2) char *phase, returns phase of interpretation
   3) char *judge, returns success/failure judgement
   4) char *pos  , returns current/failure position in challenge
   5) char *user , returns user entered in challenge
   -- returns char as success code (<0 fail, >=0 success)

.SH NEW FUNCTIONS
brings a new logging compatable with hestia (my getty daemon).

.B ySEC_request ()
logs the challenge request for a getty
   1) char *dev  , terminal device used
   2) int   rpid , process id used
   3) int   time , time-out in 0.1s intervals
   4) int   lock , lock-out in 0.1s intervals
   5) char  hint , hints shown (y/n)
   6) char *test , challenge string used
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_active ()
logs successful competion of challenge/response
   1) int   rpid , process id used
   2) char *resp , challenge response string used
   3) char  phase, final phase of interpretation
   4) char  judge, final judgement
   5) char  stat , final status
   6) char  res  , final result
   7) char *user , user logged in
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_complete ()
logs successful competion of session
   1) int   rpid , process id used
   2) char  good , full record (y/n)

.SH TERMINAL FUNCTIONS
standardizes gross handling of unix/linux terminals.  this is a very small
set of functions that can be broken out into a separate library at any time.

.B ySEC_valid ()
checks validity of a terminal device
   1) char *dev  , name of file
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_open ()
prepares a terminal device for use
   1) char *dev  , name of file
   2) int  *fd   , returns file number of open device
   3) char  std  , hangling of stdin, stdout, stderr (see stds/std)
   4) char  echo , auto-display typed characters
   5) char  keep , leave open or close after openning  (see stds/keep)
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_clear ()
clears the terminal screen
   1) int   fd   , file number of open device
   -- returns char as success code (<0 fail, >=0 success)

.B ySEC_close ()
discontinues use of a terminal device
   1) int  *fd   , file number of open device (returns grounded)
   -- returns char as success code (<0 fail, >=0 success)

.SH COLOPHON
this page is part of a documentation package meant to make our use of the
heatherly tools easier and faster

